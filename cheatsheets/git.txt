
========  merge von integration/master to feature branch ======== 

$git checkout feature/MOTIONWISE-2261-qnx-support-for-mowi-integration
$git pull origin integration/master

fix conflicts

$git commit
$git push origin HEAD


revert the last local commit (no push) without changing the files:
$git reset HEAD^


========  Cleanup outdated branches ======== 
$ git remote prune origin
$ git branch -d <branch>



======== undo locally committed files ======== 

$ git reset --soft HEAD~1
keeps changes as local unstaged change

$ git reset --soft HEAD~1
deletes changes

======== undo all local commits to state of the current branch =======

//example to go back to integration/master
$ git reset --hard origin/integration/master


======== merge von repo 1 in repo 2 (forked from repo 1) ======== 

repo1>
$ git remote show origin
* remote origin
  Fetch URL: https://:@git.tttech.com/kerberos-scm/motionwise/1100-os-hcp1-microsar4.git
  Push  URL: https://:@git.tttech.com/kerberos-scm/motionwise/1100-os-hcp1-microsar4.git
  HEAD branch: integration/master
  Remote branches:
    EP21H-761-integraion-for-basic-services                tracked

$ git remote add mowi_iecu https://:@git.tttech.com/kerberos-scm/motionwise/1100-os-iecu-microsar4.git

$ git remote show mowi_iecu
* remote mowi_iecu
  Fetch URL: https://:@git.tttech.com/kerberos-scm/motionwise/1100-os-iecu-microsar4.git
  Push  URL: https://:@git.tttech.com/kerberos-scm/motionwise/1100-os-iecu-microsar4.git
  HEAD branch: integration/master
  Remote branches:
   EP21H-761-integraion-for-basic-services                new (next fetch will store in remotes/mowi_iecu)

$ git fetch mowi_iecu

$ git branch -a
* integration/master
  remotes/mowi_iecu/EP21H-761-integraion-for-basic-services

$ git merge remotes/mowi_iecu/integration/master


======= checkout only certain files from different branch ==============
nur bestimmte files von einem anderen branch in den aktuellen branch lokal auschecken:
$ git checkout origin/feature/MOTIONWISE-4675-update-mowi-memoryconsumptionanalyser -- debug/



======= merge some commits from integration/master to release branch ========
1) neuen branch am release branch erstellen
2) neuen branch auschecken
3) am neuen brnach "git cherry-pick <commit-id1> <commit-id2> ..." mit den notwendigen commits ausführen 
4) am branch einchecken und pushen
5) pull-request to release branch

======= cherry pick =================
$ git cherry-pick -x <hash>

======= create new branch ===========
$ git checkout -b [name_of_your_new_branch]
$ git push origin [name_of_your_new_branch]


======= commit only selectively =======
$ git add -p 


========== git log ============
 git log --graph --oneline

========== checkout old version of _folder_ ============
git checkout LAST_WORKING_COMMIT -- my/path/of/interest


========== diff of current file to committed file (1 commit before HEAD) ============
git diff HEAD~1 pyth/to/file.c


========== checkout branch from "yesterday" ==========
git checkout 'integration/master@{yesterday}'


========== rename local branch ==========
git checkout old-name
git branch -m new-name
